---=== Windows Build and Run howto ===---

This is the documentation how to build the wirewhark plugin with and for Windows.



---= Windows =---

--- build ---

# Edit the files and create a packet-file.c just like in scr/plugin on github
# In Addition you have to add your plugin name to the 'PLUGIN_SRC_DIRS' in the 'CMakeLists.txt' in the root folder of the Wireshark Sources.
# FOR COMPILING WIRESHARK + PLUGINS IN WINDOWS DO THE FOLLOWING:

1. Install Microsoft C compliler and SDK
2. Install Qt
3. Install Cygwin
4. Install Python V 2.7 (Do not use V 3.0 or above)
5. Install Git and clone the source files
6. Install CMake
7. Open VS Command Prompt:

> set CYGWIN=nodosfilewarning
> set WIRESHARK_BASE_DIR=..\WiresharkSource
> set WIRESHARK_TARGET_PLATFORM=win64 (or 32)
> set QT5_BASE_DIR=..\Qt\5.6\msvc2013_64
> set WIRESHARK_VERSION_EXTRA=-YourExtraVersionInfo

8. (Optional) If your Cygwin installation path is not automatically detected by CMake, you can explicitly specify it with the following environment variable:

> set WIRESHARK_CYGWIN_INSTALL_PATH=..\cygwin64

9. Create and change to the correct build directory:

> mkdir ..\WiresharkSource\wsbuild64
> cd ..WiresharkSource\wsbuild64

10. Generate Build Files:

> cmake -DENABLE_CHM_GUIDES=on -G "Visual Studio 12 Win64" ..\WiresharkSource\wireshark

11.1 Build Wireshark and plugins:
> msbuild /m /p:Configuration=RelWithDebInfo Wireshark.sln

11.2 Build Plugin only:
> msbuild .\doip\doip.vcxproj

12. (Optional) CleanUp:
> msbuild /m /p:Configuration=RelWithDebInfo Wireshark.sln /t:Clean


--- run ---

- copy doip.ddl and doip.pdb (TODO: really needed?) to C:\Program Files\Wireshark\plugins\2.0.2\ (or the corresponding installation directory and version of wireshark)
- wireshark must be restarted to recognize the plugin (is there another possibility?)
- run wireshark and check running plugin under Help - About Wireshark - Plugins




--- different aproach with small error documentation---
Windows 7 X64:
1.) Powershell (at least version 2): as Administrator: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
2.) Install Chocolatey with PS: iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))
	(this includes .Net 4.0)
3.) Get QT Online Installer (http://qt-project.org/downloads) and install QT 5.5 msvc2013 64-bit (only)
4.) run choco just as administrator!
5.) choco install VisualStudioCommunity2013
	-> ERRORs occured, but it seems to work any way...
6.) choco install cygwin
7.) choco install cyg-get
/*
8.) cyg-get sed perl patch asciidoc docbook-xml45
	-> ERROR: cygwin not installed...
	solving seems not to be trivial, so I switched to the standard cygwin installer after some research
*/
8.) Download cygwin setup-x86_64.exe and run it from commandline:
	path_to_file\setup-x86_64.exe -q -P sed
	and do the same for: perl,patch,asciidoc,docbook-xml45
9.) choco install winflexbison
	-> downloading winflexbison 32 bit (???)
/*
10.) choco install python2
	-> ERROR: Exit code 1603
	switch to manual install, see below
*/
10.) manually download and install python (python.org/downloads/release/python-2711
	2.7.11 Windows x86-64 MSI installer (with switch: add python.exe to path)
11.) choco install git
12.) choco install cmake.portable
	-> downloading 32 bit (???)
13.) mkdir C:\Development + cd C:\Development + $env:Path += ";C:\Program Files\Git\bin"
14.) git clone https://code.wireshark.org/review/wireshark
15.) open VS2013 x64 Nativ Tools Command Promt + mkdir C:\Development\msbuild64 + cd C:\Development\msbuild64
16.) do the following (everytime you close and reopen command promt):
	> set CYGWIN=nodosfilewarning
	> set WIRESHARK_BASE_DIR=C:\Development
	> set WIRESHARK_TARGET_PLATFORM=win64
	> set QT5_BASE_DIR=C:\Qt\5.5\msvc2013_64

	> set WIRESHARK_VERSION_EXTRA=-YourExtraVersionInfo
17.) TODO add own plugin sources
18.) cmake -DENABLE_CHM_GUIDES=on -G "Visual Studio 12 Win64" ..\wireshark
19.) msbuild /m /p:Configuration=RelWithDebInfo Wireshark.sln
---> Wireshark build without errors, but unchecked yet
